#!/usr/bin/python3

###### IMPORTS
import socket
import argparse
import ipaddress
import os
################################################################################


###### GLOBALS
index = False
allFiles = False
###### CONSTANTS
CONST_LOGIN = 'xhaisl00'
################################################################################


###### FUNCTION DEFINITIONS
def constructWHEREIS(hostname):
  return "WHEREIS " + str(hostname)

def constructGET(path, hostname):
  request = "GET "+path+" FSP/1.0\r\n"
  request += "Hostname: "+hostname+"\r\n"
  request += "Agent: "+CONST_LOGIN+"\r\n\r\n"
  return request

def getFile(tcpSoc, path, hostname, fileName):
  try:
    tcpSoc.connect((resolvedIP, resolvedPort))
    tcpSoc.send(bytes(constructGET(path, hostname), 'utf-8'))
    recMsg = bytes.decode(tcpSoc.recv(2048), 'utf-8')
    # check that fetch was successful
    if str(recMsg.split("\r\n")[0].split(" ")[1]).strip() != "Success":
      print("Error occured when fetching file")
      print(recMsg.split("\n")[0])
      print("Exiting...")
      exit(1)

    # write to file
    file = open(fileName, "wb")
    while recMsg := tcpSoc.recv(32):
      file.write(recMsg)
    file.close()
  except Exception as e:
    print("Error occured when downloading file")
    print(e)
    print("Exiting...")
    exit(1)
################################################################################


###### READ ARGUMENTS FROM STDIN
argParser = argparse.ArgumentParser()
argParser.add_argument(
  "-n", required=True, nargs=1, help="IP address of server"
)
argParser.add_argument(
  "-f", required=True, nargs=1, help="Address to download from"
)
args = vars(argParser.parse_args())
################################################################################


###### RESOLVE IP IN FIRST ARGUMENT
serverIP = ""
serverPort = ""
portPos = str(args['n'][0]).find(':')
if portPos == -1 or len(args['n'][0][portPos:]) == 0:
  print("Missing port for DNS server, exiting...")
  exit(1)

try:
  serverIP = ipaddress.ip_address(str(args['n'][0][0:portPos]))
  serverPort = int(args['n'][0][portPos+1:])
  if str(serverPort) != str(args['n'][0][portPos+1:]):
    raise ValueError
except ValueError:
  print("Invalid IP address or port given, exiting...")
  exit(1)
################################################################################


###### RESOLVE FSP SERVER ADDRESS
if args['f'][0][0:6].lower() != "fsp://":
  print("Invalid server protocol, use 'fsp://', exiting...")
  exit(1)

firstSlashPos = args['f'][0][6:].find('/')
hostname = args['f'][0][6:firstSlashPos+6]
path = args['f'][0][7+firstSlashPos:]

downloadAll = False
if path[-1] == '*':
  downloadAll = True
if (path == "" or firstSlashPos == -1):
  print("Invalid path to file, exiting...")
  exit(1)
################################################################################


###### RESOLVE HOSTNAME TO IP [UDP]
recMsg = None
# creates socket connection
udpSoc = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udpSoc.settimeout(5)
# try get response from server, timeout after 5s
try:
  udpSoc.sendto(
    bytes(constructWHEREIS(hostname), 'utf-8'), (str(serverIP), serverPort)
  )
  recMsg = udpSoc.recv(2048)
except:
  print("Connection timed out when resolving hostname to IP, exiting...")
  exit(1)
# check that response is OK
if bytes.decode(recMsg[:2], "utf-8") != 'OK':
  print("Error occured when trying to resolve IP from hostname.")
  print(recMsg)
  print("Exiting...")
  exit(1)

recMsg = bytes.decode(recMsg).split()[1]
portPos = recMsg.find(':')
resolvedIP = recMsg[0:portPos]
resolvedPort = int(recMsg[portPos+1:])
udpSoc.close()
################################################################################


###### GET RESPONSE [TCP]
recMsg = None
# creates socket connection
tcpSoc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
  # resolve file name
  fileName = None
  if "/" in path:
    fileName = path.split("/")[-1].strip()
  else:
    fileName = path
    if path == "index":
      index = True
    if path[-1].strip() == '*':
      index = True
      allFiles = True

  # check if we should download index or one file
  if index:
    tcpSoc.connect((resolvedIP, resolvedPort))
    tcpSoc.send(bytes(constructGET("index", hostname), 'utf-8'))
    recMsg = bytes.decode(tcpSoc.recv(2048), 'utf-8')
    if str(recMsg.split("\r\n")[0].split(" ")[1]).strip() != "Success":
      print("Error occured when fetching file")
      print(recMsg.split("\n")[0])
      print("Exiting...")
      exit(1)

    # check if we should download all files (*)
    if allFiles:
      if len(recMsg.split("\r\n")[3:]) == 1:
        print("No files found on server, exiting...")
        exit(1)
      for serverFile in recMsg.split("\r\n")[3:]:
        hold = serverFile.split("/")
        if len(hold) > 1:
          pwd = os.getcwd()
          for directory in hold[:-1]:
            if not(directory in os.listdir()):
              os.mkdir("./"+directory)
            os.chdir("./"+directory)
          os.chdir(pwd)

        if serverFile != '':
          tmpSoc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          recMsg = getFile(tmpSoc, serverFile, hostname, serverFile)
          tmpSoc.close()
    else:
      file = open("index", "wb")
      for serverFile in recMsg.split("\r\n")[3:]:
        if serverFile != '':
          file.write(bytes(serverFile+"\n", 'utf-8'))
      file.close()
    tcpSoc.close()
  else:
    recMsg = getFile(tcpSoc, path, hostname, fileName)
except Exception as e:
  print("Error when fetching data from server, exiting...")
  print(e)
  exit(1)
################################################################################